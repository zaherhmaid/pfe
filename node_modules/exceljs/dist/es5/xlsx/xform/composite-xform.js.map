{"version":3,"sources":["../../../../lib/xlsx/xform/composite-xform.js"],"names":["utils","require","BaseXform","CompositeXform","module","exports","options","tag","attrs","children","map","reduce","child","name","inherits","prepare","model","forEach","xform","render","xmlStream","openNode","closeNode","parseOpen","node","parser","parseText","text","parseClose","undefined","reconcile"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('../../utils/utils');\nconst BaseXform = require('./base-xform');\n\nconst CompositeXform = (module.exports = function(options) {\n  this.tag = options.tag;\n  this.attrs = options.attrs;\n  this.children = options.children;\n  this.map = this.children.reduce((map, child) => {\n    const name = child.name || child.tag;\n    const tag = child.tag || child.name;\n    map[tag] = child;\n    child.name = name;\n    child.tag = tag;\n    return map;\n  }, {});\n});\n\nutils.inherits(CompositeXform, BaseXform, {\n  prepare(model, options) {\n    this.children.forEach(child => {\n      child.xform.prepare(model[child.tag], options);\n    });\n  },\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag, this.attrs);\n    this.children.forEach(child => {\n      child.xform.render(xmlStream, model[child.name]);\n    });\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.xform.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.model = {};\n        return true;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.xform.parseOpen(node);\n          return true;\n        }\n    }\n    return false;\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.xform.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.xform.parseClose(name)) {\n        this.model[this.parser.name] = this.parser.xform.model;\n        this.parser = undefined;\n      }\n      return true;\n    }\n    return false;\n  },\n  reconcile(model, options) {\n    this.children.forEach(child => {\n      child.xform.prepare(model[child.tag], options);\n    });\n  },\n});\n"],"file":"composite-xform.js"}