{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/row-xform.js"],"names":["utils","require","BaseXform","CellXform","RowXform","module","exports","options","maxItems","map","c","inherits","tag","prepare","model","styleId","styles","addStyleModel","style","cellXform","cells","forEach","cellModel","render","xmlStream","openNode","addAttribute","number","height","hidden","min","max","outlineLevel","collapsed","closeNode","parseOpen","node","parser","name","numRowsSeen","spans","attributes","split","span","parseInt","undefined","r","s","bestFit","ht","parseFloat","parseText","text","parseClose","push","length","Error","reconcile","getStyleModel"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AAEA,IAAMG,QAAQ,GAAIC,MAAM,CAACC,OAAP,GAAiB,UAASC,OAAT,EAAkB;AACnD,OAAKC,QAAL,GAAgBD,OAAO,IAAIA,OAAO,CAACC,QAAnC;AACA,OAAKC,GAAL,GAAW;AACTC,IAAAA,CAAC,EAAE,IAAIP,SAAJ;AADM,GAAX;AAGD,CALD,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAH,KAAK,CAACW,QAAN,CAAeP,QAAf,EAAyBF,SAAzB,EAAoC;AAClC,MAAIU,GAAJ,GAAU;AACR,WAAO,KAAP;AACD,GAHiC;;AAKlCC,EAAAA,OALkC,mBAK1BC,KAL0B,EAKnBP,OALmB,EAKV;AACtB,QAAMQ,OAAO,GAAGR,OAAO,CAACS,MAAR,CAAeC,aAAf,CAA6BH,KAAK,CAACI,KAAnC,CAAhB;;AACA,QAAIH,OAAJ,EAAa;AACXD,MAAAA,KAAK,CAACC,OAAN,GAAgBA,OAAhB;AACD;;AACD,QAAMI,SAAS,GAAG,KAAKV,GAAL,CAASC,CAA3B;AACAI,IAAAA,KAAK,CAACM,KAAN,CAAYC,OAAZ,CAAoB,UAAAC,SAAS,EAAI;AAC/BH,MAAAA,SAAS,CAACN,OAAV,CAAkBS,SAAlB,EAA6Bf,OAA7B;AACD,KAFD;AAGD,GAdiC;AAgBlCgB,EAAAA,MAhBkC,kBAgB3BC,SAhB2B,EAgBhBV,KAhBgB,EAgBTP,OAhBS,EAgBA;AAChCiB,IAAAA,SAAS,CAACC,QAAV,CAAmB,KAAnB;AACAD,IAAAA,SAAS,CAACE,YAAV,CAAuB,GAAvB,EAA4BZ,KAAK,CAACa,MAAlC;;AACA,QAAIb,KAAK,CAACc,MAAV,EAAkB;AAChBJ,MAAAA,SAAS,CAACE,YAAV,CAAuB,IAAvB,EAA6BZ,KAAK,CAACc,MAAnC;AACAJ,MAAAA,SAAS,CAACE,YAAV,CAAuB,cAAvB,EAAuC,GAAvC;AACD;;AACD,QAAIZ,KAAK,CAACe,MAAV,EAAkB;AAChBL,MAAAA,SAAS,CAACE,YAAV,CAAuB,QAAvB,EAAiC,GAAjC;AACD;;AACD,QAAIZ,KAAK,CAACgB,GAAN,GAAY,CAAZ,IAAiBhB,KAAK,CAACiB,GAAN,GAAY,CAA7B,IAAkCjB,KAAK,CAACgB,GAAN,IAAahB,KAAK,CAACiB,GAAzD,EAA8D;AAC5DP,MAAAA,SAAS,CAACE,YAAV,CAAuB,OAAvB,YAAmCZ,KAAK,CAACgB,GAAzC,cAAgDhB,KAAK,CAACiB,GAAtD;AACD;;AACD,QAAIjB,KAAK,CAACC,OAAV,EAAmB;AACjBS,MAAAA,SAAS,CAACE,YAAV,CAAuB,GAAvB,EAA4BZ,KAAK,CAACC,OAAlC;AACAS,MAAAA,SAAS,CAACE,YAAV,CAAuB,cAAvB,EAAuC,GAAvC;AACD;;AACDF,IAAAA,SAAS,CAACE,YAAV,CAAuB,iBAAvB,EAA0C,MAA1C;;AACA,QAAIZ,KAAK,CAACkB,YAAV,EAAwB;AACtBR,MAAAA,SAAS,CAACE,YAAV,CAAuB,cAAvB,EAAuCZ,KAAK,CAACkB,YAA7C;AACD;;AACD,QAAIlB,KAAK,CAACmB,SAAV,EAAqB;AACnBT,MAAAA,SAAS,CAACE,YAAV,CAAuB,WAAvB,EAAoC,GAApC;AACD;;AAED,QAAMP,SAAS,GAAG,KAAKV,GAAL,CAASC,CAA3B;AACAI,IAAAA,KAAK,CAACM,KAAN,CAAYC,OAAZ,CAAoB,UAAAC,SAAS,EAAI;AAC/BH,MAAAA,SAAS,CAACI,MAAV,CAAiBC,SAAjB,EAA4BF,SAA5B,EAAuCf,OAAvC;AACD,KAFD;AAIAiB,IAAAA,SAAS,CAACU,SAAV;AACD,GA/CiC;AAiDlCC,EAAAA,SAjDkC,qBAiDxBC,IAjDwB,EAiDlB;AACd,QAAI,KAAKC,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;;AACD,QAAIA,IAAI,CAACE,IAAL,KAAc,KAAlB,EAAyB;AACvB,WAAKC,WAAL,IAAoB,CAApB;AACA,UAAMC,KAAK,GAAGJ,IAAI,CAACK,UAAL,CAAgBD,KAAhB,GAAwBJ,IAAI,CAACK,UAAL,CAAgBD,KAAhB,CAAsBE,KAAtB,CAA4B,GAA5B,EAAiCjC,GAAjC,CAAqC,UAAAkC,IAAI;AAAA,eAAIC,QAAQ,CAACD,IAAD,EAAO,EAAP,CAAZ;AAAA,OAAzC,CAAxB,GAA2F,CAACE,SAAD,EAAYA,SAAZ,CAAzG;AACA,UAAM/B,KAAK,GAAI,KAAKA,KAAL,GAAa;AAC1Ba,QAAAA,MAAM,EAAEiB,QAAQ,CAACR,IAAI,CAACK,UAAL,CAAgBK,CAAjB,EAAoB,EAApB,CADU;AAE1BhB,QAAAA,GAAG,EAAEU,KAAK,CAAC,CAAD,CAFgB;AAG1BT,QAAAA,GAAG,EAAES,KAAK,CAAC,CAAD,CAHgB;AAI1BpB,QAAAA,KAAK,EAAE;AAJmB,OAA5B;;AAMA,UAAIgB,IAAI,CAACK,UAAL,CAAgBM,CAApB,EAAuB;AACrBjC,QAAAA,KAAK,CAACC,OAAN,GAAgB6B,QAAQ,CAACR,IAAI,CAACK,UAAL,CAAgBM,CAAjB,EAAoB,EAApB,CAAxB;AACD;;AACD,UAAIX,IAAI,CAACK,UAAL,CAAgBZ,MAApB,EAA4B;AAC1Bf,QAAAA,KAAK,CAACe,MAAN,GAAe,IAAf;AACD;;AACD,UAAIO,IAAI,CAACK,UAAL,CAAgBO,OAApB,EAA6B;AAC3BlC,QAAAA,KAAK,CAACkC,OAAN,GAAgB,IAAhB;AACD;;AACD,UAAIZ,IAAI,CAACK,UAAL,CAAgBQ,EAApB,EAAwB;AACtBnC,QAAAA,KAAK,CAACc,MAAN,GAAesB,UAAU,CAACd,IAAI,CAACK,UAAL,CAAgBQ,EAAjB,CAAzB;AACD;;AACD,UAAIb,IAAI,CAACK,UAAL,CAAgBT,YAApB,EAAkC;AAChClB,QAAAA,KAAK,CAACkB,YAAN,GAAqBY,QAAQ,CAACR,IAAI,CAACK,UAAL,CAAgBT,YAAjB,EAA+B,EAA/B,CAA7B;AACD;;AACD,UAAII,IAAI,CAACK,UAAL,CAAgBR,SAApB,EAA+B;AAC7BnB,QAAAA,KAAK,CAACmB,SAAN,GAAkB,IAAlB;AACD;;AACD,aAAO,IAAP;AACD;;AAED,SAAKI,MAAL,GAAc,KAAK5B,GAAL,CAAS2B,IAAI,CAACE,IAAd,CAAd;;AACA,QAAI,KAAKD,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYF,SAAZ,CAAsBC,IAAtB;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GA1FiC;AA2FlCe,EAAAA,SA3FkC,qBA2FxBC,IA3FwB,EA2FlB;AACd,QAAI,KAAKf,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYc,SAAZ,CAAsBC,IAAtB;AACD;AACF,GA/FiC;AAgGlCC,EAAAA,UAhGkC,sBAgGvBf,IAhGuB,EAgGjB;AACf,QAAI,KAAKD,MAAT,EAAiB;AACf,UAAI,CAAC,KAAKA,MAAL,CAAYgB,UAAZ,CAAuBf,IAAvB,CAAL,EAAmC;AACjC,aAAKxB,KAAL,CAAWM,KAAX,CAAiBkC,IAAjB,CAAsB,KAAKjB,MAAL,CAAYvB,KAAlC;;AACA,YAAI,KAAKN,QAAL,IAAiB,KAAKM,KAAL,CAAWM,KAAX,CAAiBmC,MAAjB,GAA0B,KAAK/C,QAApD,EAA8D;AAC5D,gBAAM,IAAIgD,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,aAAKnB,MAAL,GAAcQ,SAAd;AACD;;AACD,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GA5GiC;AA8GlCY,EAAAA,SA9GkC,qBA8GxB3C,KA9GwB,EA8GjBP,OA9GiB,EA8GR;AACxBO,IAAAA,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACC,OAAN,GAAgBR,OAAO,CAACS,MAAR,CAAe0C,aAAf,CAA6B5C,KAAK,CAACC,OAAnC,CAAhB,GAA8D,EAA5E;;AACA,QAAID,KAAK,CAACC,OAAN,KAAkB8B,SAAtB,EAAiC;AAC/B/B,MAAAA,KAAK,CAACC,OAAN,GAAgB8B,SAAhB;AACD;;AAED,QAAM1B,SAAS,GAAG,KAAKV,GAAL,CAASC,CAA3B;AACAI,IAAAA,KAAK,CAACM,KAAN,CAAYC,OAAZ,CAAoB,UAAAC,SAAS,EAAI;AAC/BH,MAAAA,SAAS,CAACsC,SAAV,CAAoBnC,SAApB,EAA+Bf,OAA/B;AACD,KAFD;AAGD;AAxHiC,CAApC","sourcesContent":["'use strict';\n\nconst utils = require('../../../utils/utils');\nconst BaseXform = require('../base-xform');\n\nconst CellXform = require('./cell-xform');\n\nconst RowXform = (module.exports = function(options) {\n  this.maxItems = options && options.maxItems;\n  this.map = {\n    c: new CellXform(),\n  };\n});\n\n// <row r=\"<%=row.number%>\"\n//     <% if(row.height) {%> ht=\"<%=row.height%>\" customHeight=\"1\"<% } %>\n//     <% if(row.hidden) {%> hidden=\"1\"<% } %>\n//     <% if(row.min > 0 && row.max > 0 && row.min <= row.max) {%> spans=\"<%=row.min%>:<%=row.max%>\"<% } %>\n//     <% if (row.styleId) { %> s=\"<%=row.styleId%>\" customFormat=\"1\" <% } %>\n//     x14ac:dyDescent=\"0.25\">\n//   <% row.cells.forEach(function(cell){ %>\n//     <%=cell.xml%><% }); %>\n// </row>\n\nutils.inherits(RowXform, BaseXform, {\n  get tag() {\n    return 'row';\n  },\n\n  prepare(model, options) {\n    const styleId = options.styles.addStyleModel(model.style);\n    if (styleId) {\n      model.styleId = styleId;\n    }\n    const cellXform = this.map.c;\n    model.cells.forEach(cellModel => {\n      cellXform.prepare(cellModel, options);\n    });\n  },\n\n  render(xmlStream, model, options) {\n    xmlStream.openNode('row');\n    xmlStream.addAttribute('r', model.number);\n    if (model.height) {\n      xmlStream.addAttribute('ht', model.height);\n      xmlStream.addAttribute('customHeight', '1');\n    }\n    if (model.hidden) {\n      xmlStream.addAttribute('hidden', '1');\n    }\n    if (model.min > 0 && model.max > 0 && model.min <= model.max) {\n      xmlStream.addAttribute('spans', `${model.min}:${model.max}`);\n    }\n    if (model.styleId) {\n      xmlStream.addAttribute('s', model.styleId);\n      xmlStream.addAttribute('customFormat', '1');\n    }\n    xmlStream.addAttribute('x14ac:dyDescent', '0.25');\n    if (model.outlineLevel) {\n      xmlStream.addAttribute('outlineLevel', model.outlineLevel);\n    }\n    if (model.collapsed) {\n      xmlStream.addAttribute('collapsed', '1');\n    }\n\n    const cellXform = this.map.c;\n    model.cells.forEach(cellModel => {\n      cellXform.render(xmlStream, cellModel, options);\n    });\n\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    if (node.name === 'row') {\n      this.numRowsSeen += 1;\n      const spans = node.attributes.spans ? node.attributes.spans.split(':').map(span => parseInt(span, 10)) : [undefined, undefined];\n      const model = (this.model = {\n        number: parseInt(node.attributes.r, 10),\n        min: spans[0],\n        max: spans[1],\n        cells: [],\n      });\n      if (node.attributes.s) {\n        model.styleId = parseInt(node.attributes.s, 10);\n      }\n      if (node.attributes.hidden) {\n        model.hidden = true;\n      }\n      if (node.attributes.bestFit) {\n        model.bestFit = true;\n      }\n      if (node.attributes.ht) {\n        model.height = parseFloat(node.attributes.ht);\n      }\n      if (node.attributes.outlineLevel) {\n        model.outlineLevel = parseInt(node.attributes.outlineLevel, 10);\n      }\n      if (node.attributes.collapsed) {\n        model.collapsed = true;\n      }\n      return true;\n    }\n\n    this.parser = this.map[node.name];\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    return false;\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.cells.push(this.parser.model);\n        if (this.maxItems && this.model.cells.length > this.maxItems) {\n          throw new Error('Max column count exceeded');\n        }\n        this.parser = undefined;\n      }\n      return true;\n    }\n    return false;\n  },\n\n  reconcile(model, options) {\n    model.style = model.styleId ? options.styles.getStyleModel(model.styleId) : {};\n    if (model.styleId !== undefined) {\n      model.styleId = undefined;\n    }\n\n    const cellXform = this.map.c;\n    model.cells.forEach(cellModel => {\n      cellXform.reconcile(cellModel, options);\n    });\n  },\n});\n"],"file":"row-xform.js"}