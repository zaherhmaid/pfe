{"version":3,"sources":["../../../../lib/xlsx/xform/list-xform.js"],"names":["utils","require","BaseXform","ListXform","module","exports","options","tag","count","empty","$count","$","childXform","maxItems","inherits","prepare","model","forEach","childModel","render","xmlStream","length","openNode","addAttribute","closeNode","leafNode","parseOpen","node","parser","name","parseText","text","parseClose","push","undefined","Error","reconcile"],"mappings":"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","sourcesContent":["'use strict';\n\nconst utils = require('../../utils/utils');\nconst BaseXform = require('./base-xform');\n\nconst ListXform = (module.exports = function(options) {\n  this.tag = options.tag;\n  this.count = options.count;\n  this.empty = options.empty;\n  this.$count = options.$count || 'count';\n  this.$ = options.$;\n  this.childXform = options.childXform;\n  this.maxItems = options.maxItems;\n});\n\nutils.inherits(ListXform, BaseXform, {\n  prepare(model, options) {\n    const { childXform } = this;\n    if (model) {\n      model.forEach(childModel => {\n        childXform.prepare(childModel, options);\n      });\n    }\n  },\n\n  render(xmlStream, model) {\n    if (model && model.length) {\n      xmlStream.openNode(this.tag, this.$);\n      if (this.count) {\n        xmlStream.addAttribute(this.$count, model.length);\n      }\n\n      const { childXform } = this;\n      model.forEach(childModel => {\n        childXform.render(xmlStream, childModel);\n      });\n\n      xmlStream.closeNode();\n    } else if (this.empty) {\n      xmlStream.leafNode(this.tag);\n    }\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    switch (node.name) {\n      case this.tag:\n        this.model = [];\n        return true;\n      default:\n        if (this.childXform.parseOpen(node)) {\n          this.parser = this.childXform;\n          return true;\n        }\n        return false;\n    }\n  },\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.push(this.parser.model);\n        this.parser = undefined;\n\n        if (this.maxItems && this.model.length > this.maxItems) {\n          throw new Error(`Max ${this.childXform.tag} count exceeded`);\n        }\n      }\n      return true;\n    }\n    return false;\n  },\n  reconcile(model, options) {\n    if (model) {\n      const { childXform } = this;\n      model.forEach(childModel => {\n        childXform.reconcile(childModel, options);\n      });\n    }\n  },\n});\n"],"file":"list-xform.js"}