{"version":3,"sources":["../../../../lib/xlsx/xform/static-xform.js"],"names":["utils","require","BaseXform","XmlStream","build","xmlStream","model","openNode","tag","$","c","forEach","child","t","writeText","closeNode","StaticXform","module","exports","_model","inherits","render","_xml","stream","xml","writeXml","parseOpen","parseText","parseClose","name"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,wBAAD,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,KAAT,CAAeC,SAAf,EAA0BC,KAA1B,EAAiC;AAC/BD,EAAAA,SAAS,CAACE,QAAV,CAAmBD,KAAK,CAACE,GAAzB,EAA8BF,KAAK,CAACG,CAApC;;AACA,MAAIH,KAAK,CAACI,CAAV,EAAa;AACXJ,IAAAA,KAAK,CAACI,CAAN,CAAQC,OAAR,CAAgB,UAAAC,KAAK,EAAI;AACvBR,MAAAA,KAAK,CAACC,SAAD,EAAYO,KAAZ,CAAL;AACD,KAFD;AAGD;;AACD,MAAIN,KAAK,CAACO,CAAV,EAAa;AACXR,IAAAA,SAAS,CAACS,SAAV,CAAoBR,KAAK,CAACO,CAA1B;AACD;;AACDR,EAAAA,SAAS,CAACU,SAAV;AACD;;AAED,IAAMC,WAAW,GAAIC,MAAM,CAACC,OAAP,GAAiB,UAASZ,KAAT,EAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,OAAKa,MAAL,GAAcb,KAAd;AACD,CARD;;AAUAN,KAAK,CAACoB,QAAN,CAAeJ,WAAf,EAA4Bd,SAA5B,EAAuC;AACrCmB,EAAAA,MADqC,kBAC9BhB,SAD8B,EACnB;AAChB,QAAI,CAAC,KAAKiB,IAAV,EAAgB;AACd,UAAMC,MAAM,GAAG,IAAIpB,SAAJ,EAAf;AACAC,MAAAA,KAAK,CAACmB,MAAD,EAAS,KAAKJ,MAAd,CAAL;AACA,WAAKG,IAAL,GAAYC,MAAM,CAACC,GAAnB;AACD;;AACDnB,IAAAA,SAAS,CAACoB,QAAV,CAAmB,KAAKH,IAAxB;AACD,GARoC;AAUrCI,EAAAA,SAVqC,uBAUzB;AACV,WAAO,IAAP;AACD,GAZoC;AAarCC,EAAAA,SAbqC,uBAazB,CAAE,CAbuB;AAcrCC,EAAAA,UAdqC,sBAc1BC,IAd0B,EAcpB;AACf,YAAQA,IAAR;AACE,WAAK,KAAKV,MAAL,CAAYX,GAAjB;AACE,eAAO,KAAP;;AACF;AACE,eAAO,IAAP;AAJJ;AAMD;AArBoC,CAAvC","sourcesContent":["'use strict';\n\nconst utils = require('../../utils/utils');\nconst BaseXform = require('./base-xform');\nconst XmlStream = require('../../utils/xml-stream');\n\n// const model = {\n//   tag: 'name',\n//   $: {attr: 'value'},\n//   c: [\n//     { tag: 'child' }\n//   ],\n//   t: 'some text'\n// };\n\nfunction build(xmlStream, model) {\n  xmlStream.openNode(model.tag, model.$);\n  if (model.c) {\n    model.c.forEach(child => {\n      build(xmlStream, child);\n    });\n  }\n  if (model.t) {\n    xmlStream.writeText(model.t);\n  }\n  xmlStream.closeNode();\n}\n\nconst StaticXform = (module.exports = function(model) {\n  // This class is an optimisation for static (unimportant and unchanging) xml\n  // It is stateless - apart from its static model and so can be used as a singleton\n  // Being stateless - it will only track entry to and exit from it's root xml tag during parsing and nothing else\n  // Known issues:\n  //    since stateless - parseOpen always returns true. Parent xform must know when to start using this xform\n  //    if the root tag is recursive, the parsing will behave unpredictably\n  this._model = model;\n});\n\nutils.inherits(StaticXform, BaseXform, {\n  render(xmlStream) {\n    if (!this._xml) {\n      const stream = new XmlStream();\n      build(stream, this._model);\n      this._xml = stream.xml;\n    }\n    xmlStream.writeXml(this._xml);\n  },\n\n  parseOpen() {\n    return true;\n  },\n  parseText() {},\n  parseClose(name) {\n    switch (name) {\n      case this._model.tag:\n        return false;\n      default:\n        return true;\n    }\n  },\n});\n"],"file":"static-xform.js"}