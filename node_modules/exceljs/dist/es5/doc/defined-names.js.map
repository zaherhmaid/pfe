{"version":3,"sources":["../../../lib/doc/defined-names.js"],"names":["_","require","colCache","CellMatrix","Range","rangeRegexp","module","exports","matrixMap","name","matrix","locStr","location","decodeEx","addEx","getMatrix","top","col","left","right","row","bottom","address","sheetName","n2l","addCellEx","removeEx","removeCellEx","each","callback","forEach","cell","addressStr","getNamesEx","map","findCellEx","filter","Boolean","mark","range","x","y","vGrow","yy","edge","c","findCellAt","hGrow","xx","cells","push","i","length","ranges","_explore","$shortRange","forEachInSheet","start","numDelete","numInsert","spliceRows","normaliseMatrix","spliceColumns","getRanges","definedName","value","rangeStr","test","split","pop","addCell"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('../utils/under-dash');\nconst colCache = require('../utils/col-cache');\nconst CellMatrix = require('../utils/cell-matrix');\nconst Range = require('./range');\n\nconst rangeRegexp = /[$](\\w+)[$](\\d+)(:[$](\\w+)[$](\\d+))?/;\n\nmodule.exports = class DefinedNames {\n  constructor() {\n    this.matrixMap = {};\n  }\n\n  getMatrix(name) {\n    const matrix = this.matrixMap[name] || (this.matrixMap[name] = new CellMatrix());\n    return matrix;\n  }\n\n  // add a name to a cell. locStr in the form SheetName!$col$row or SheetName!$c1$r1:$c2:$r2\n  add(locStr, name) {\n    const location = colCache.decodeEx(locStr);\n    this.addEx(location, name);\n  }\n\n  addEx(location, name) {\n    const matrix = this.getMatrix(name);\n    if (location.top) {\n      for (let col = location.left; col <= location.right; col++) {\n        for (let row = location.top; row <= location.bottom; row++) {\n          const address = {\n            sheetName: location.sheetName,\n            address: colCache.n2l(col) + row,\n            row,\n            col,\n          };\n\n          matrix.addCellEx(address);\n        }\n      }\n    } else {\n      matrix.addCellEx(location);\n    }\n  }\n\n  remove(locStr, name) {\n    const location = colCache.decodeEx(locStr);\n    this.removeEx(location, name);\n  }\n\n  removeEx(location, name) {\n    const matrix = this.getMatrix(name);\n    matrix.removeCellEx(location);\n  }\n\n  removeAllNames(location) {\n    _.each(this.matrixMap, matrix => {\n      matrix.removeCellEx(location);\n    });\n  }\n\n  forEach(callback) {\n    _.each(this.matrixMap, (matrix, name) => {\n      matrix.forEach(cell => {\n        callback(name, cell);\n      });\n    });\n  }\n\n  // get all the names of a cell\n  getNames(addressStr) {\n    return this.getNamesEx(colCache.decodeEx(addressStr));\n  }\n\n  getNamesEx(address) {\n    return _.map(this.matrixMap, (matrix, name) => matrix.findCellEx(address) && name).filter(Boolean);\n  }\n\n  _explore(matrix, cell) {\n    cell.mark = false;\n    const { sheetName } = cell;\n\n    const range = new Range(cell.row, cell.col, cell.row, cell.col, sheetName);\n    let x;\n    let y;\n\n    // grow vertical - only one col to worry about\n    function vGrow(yy, edge) {\n      const c = matrix.findCellAt(sheetName, yy, cell.col);\n      if (!c || !c.mark) {\n        return false;\n      }\n      range[edge] = yy;\n      c.mark = false;\n      return true;\n    }\n    for (y = cell.row - 1; vGrow(y, 'top'); y--);\n    for (y = cell.row + 1; vGrow(y, 'bottom'); y++);\n\n    // grow horizontal - ensure all rows can grow\n    function hGrow(xx, edge) {\n      const cells = [];\n      for (y = range.top; y <= range.bottom; y++) {\n        const c = matrix.findCellAt(sheetName, y, xx);\n        if (c && c.mark) {\n          cells.push(c);\n        } else {\n          return false;\n        }\n      }\n      range[edge] = xx;\n      for (let i = 0; i < cells.length; i++) {\n        cells[i].mark = false;\n      }\n      return true;\n    }\n    for (x = cell.col - 1; hGrow(x, 'left'); x--);\n    for (x = cell.col + 1; hGrow(x, 'right'); x++);\n\n    return range;\n  }\n\n  getRanges(name, matrix) {\n    matrix = matrix || this.matrixMap[name];\n\n    if (!matrix) {\n      return { name, ranges: [] };\n    }\n\n    // mark and sweep!\n    matrix.forEach(cell => {\n      cell.mark = true;\n    });\n    const ranges = matrix\n      .map(cell => cell.mark && this._explore(matrix, cell))\n      .filter(Boolean)\n      .map(range => range.$shortRange);\n\n    return {\n      name,\n      ranges,\n    };\n  }\n\n  normaliseMatrix(matrix, sheetName) {\n    // some of the cells might have shifted on specified sheet\n    // need to reassign rows, cols\n    matrix.forEachInSheet(sheetName, (cell, row, col) => {\n      if (cell) {\n        if (cell.row !== row || cell.col !== col) {\n          cell.row = row;\n          cell.col = col;\n          cell.address = colCache.n2l(col) + row;\n        }\n      }\n    });\n  }\n\n  spliceRows(sheetName, start, numDelete, numInsert) {\n    _.each(this.matrixMap, matrix => {\n      matrix.spliceRows(sheetName, start, numDelete, numInsert);\n      this.normaliseMatrix(matrix, sheetName);\n    });\n  }\n\n  spliceColumns(sheetName, start, numDelete, numInsert) {\n    _.each(this.matrixMap, matrix => {\n      matrix.spliceColumns(sheetName, start, numDelete, numInsert);\n      this.normaliseMatrix(matrix, sheetName);\n    });\n  }\n\n  get model() {\n    // To get names per cell - just iterate over all names finding cells if they exist\n    return _.map(this.matrixMap, (matrix, name) => this.getRanges(name, matrix)).filter(definedName => definedName.ranges.length);\n  }\n\n  set model(value) {\n    // value is [ { name, ranges }, ... ]\n    const matrixMap = (this.matrixMap = {});\n    value.forEach(definedName => {\n      const matrix = (matrixMap[definedName.name] = new CellMatrix());\n      definedName.ranges.forEach(rangeStr => {\n        if (rangeRegexp.test(rangeStr.split('!').pop() || '')) {\n          matrix.addCell(rangeStr);\n        }\n      });\n    });\n  }\n};\n"],"file":"defined-names.js"}